import matplotlib
matplotlib.use('Agg')  # Force the Agg backend before importing pyplot
import matplotlib.pyplot as plt
from .drug_likeness_analyzer import DrugLikenessAnalyzer
import pandas as pd
import os
import json

def rule_based_evaluation(data_string):
    """
    Run a rule-based evaluation using the DrugLikenessAnalyzer on the provided data string.

    Args:
        data_string (str): Input data for analysis.

    Returns:
        dict: Summary report generated by DrugLikenessAnalyzer.
    """
    analyzer = DrugLikenessAnalyzer(data=data_string)
    report = analyzer.get_summary_report()
    return report

def save_existing_drug_smiles(extraction_file, pool_directory):
    """
    Extracts SMILES strings from an extraction JSON file and saves them as a CSV file
    in the specified pool directory.

    Args:
        extraction_file (str): Path to the extraction JSON file.
        pool_directory (str): Directory where the CSV will be saved.

    Returns:
        None
    """
    with open(extraction_file, "r") as f:
        extraction_data = json.load(f)
    smiles = extraction_data.get("SMILES", None)
    if smiles:
        # smiles are string or list
        if isinstance(smiles, str):
            smiles = [smiles]
        # Create a DataFrame from the list of SMILES
        smiles_df = pd.DataFrame(smiles, columns=["SMILES"])
        save_path = os.path.join(pool_directory, "existing_drug_molecules.csv")
        smiles_df.to_csv(save_path, index=False)
    else:
        print("No existing drug SMILES found in extraction.json.")

def combine_smiles_files(pool_directory):
    """
    Combines SMILES from all CSV files in a directory into a single CSV file.
    Only includes files with a 'SMILES' column and skips files starting with 'combined_'.

    Args:
        pool_directory (str): Path to the directory containing the CSV files.

    Returns:
        None
    """
    combined_data = []

    # Iterate through all files in the directory
    for file_name in os.listdir(pool_directory):
        if file_name.endswith(".csv") and not file_name.startswith("combined_"):
            file_path = os.path.join(pool_directory, file_name)
            try:
                # Read the CSV file
                df = pd.read_csv(file_path)

                # Normalize column names to uppercase
                df.columns = df.columns.str.upper()

                # Ensure the 'SMILES' column exists
                if "SMILES" not in df.columns:
                    print(f"Skipping {file_name}: No 'SMILES' column found.")
                    continue

                combined_data.append(df[["SMILES"]])
            except Exception as e:
                print(f"Error processing {file_name}: {e}")

    # Combine all dataframes and save to the output file
    if combined_data:
        combined_df = pd.concat(combined_data, ignore_index=True)
        output_file = os.path.join(pool_directory, "combined_smiles.csv")
        combined_df.to_csv(output_file, index=False)
        print(f"Combined CSV saved to {output_file}")
    else:
        print("No valid CSV files found in the directory.")

def extract_random_samples(file_path, save_path, num_samples=10):
    """
    Extracts a specified number of random SMILES samples from a CSV file and saves them to a new CSV file.

    Args:
        file_path (str): Path to the input CSV file containing SMILES.
        save_path (str): Path where the sampled CSV will be saved.
        num_samples (int): Number of random samples to extract (default: 10).

    Returns:
        pd.DataFrame or None: The sampled DataFrame, or None if input is invalid.
    """
    df = pd.read_csv(file_path)
    if df.empty:
        print(f"The file {file_path} is empty or does not exist.")
        return None
    # Ensure the 'SMILES' column exists
    if "SMILES" not in df.columns:
        print(f"Skipping {file_path}: No 'SMILES' column found.")
        return None
    # Randomly sample the specified number of rows
    sampled_df = df.sample(n=num_samples, random_state=42)
    # Only keep the 'SMILES' column
    sampled_df = sampled_df[["SMILES"]].reset_index(drop=True)
    # Save the sampled DataFrame to a new CSV file
    sampled_df.to_csv(save_path, index=False)
    print(f"Random samples saved to {save_path}")
    return sampled_df



def combine_csv_files(file1, file2, output_file):
    """
    Combines two CSV files based on the 'SMILES' column and saves the result to a new file.
    
    Args:
        file1 (str): Path to the first CSV file.
        file2 (str): Path to the second CSV file.
        output_file (str): Path where the combined CSV will be saved.
    """
    df1 = pd.read_csv(file1)
    df2 = pd.read_csv(file2)
    
    # merge the two dataframes on the 'SMILES' column
    if 'SMILES' not in df1.columns or 'SMILES' not in df2.columns:
        raise ValueError("Both CSV files must contain a 'SMILES' column to combine them.")
    if df1['SMILES'].equals(df2['SMILES']):
        print("Both CSV files have the same 'SMILES' values. Combining them.")

    # merge based on 'SMILES' column
    combined_df = pd.merge(df1, df2, on='SMILES')
    

    combined_df.to_csv(output_file, index=False)

    # remove the original files
    if os.path.exists(file1):
        os.remove(file1)
    if os.path.exists(file2):
        os.remove(file2)
    print(f"[SUCCESS] Combined CSV saved to: {output_file}")
